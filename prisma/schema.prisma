// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @map("teacher_id") @db.Uuid
  name          String         @db.VarChar(100)
  email         String         @unique @db.VarChar(100)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime       @default(now()) @map("updated_at") @db.Timestamptz
  
  classes       Class[]
  subjects      Subject[]
  folders       Folder[]
  approvedAssessments Assessment[] @relation("ApprovedBy")

  @@map("teachers")
}

model Class {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @map("class_id") @db.Uuid
  className    String     @map("class_name") @db.VarChar(100)
  academicYear String     @map("academic_year") @db.VarChar(10)
  teacherId    String     @map("teacher_id") @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime   @default(now()) @map("updated_at") @db.Timestamptz
  
  teacher      Teacher    @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  students     Student[]
  subjects     Subject[]

  @@map("classes")
}

model Student {
  id            String           @id @default(dbgenerated("uuid_generate_v4()")) @map("student_id") @db.Uuid
  name          String           @db.VarChar(100)
  email         String           @unique @db.VarChar(100)
  classId       String           @map("class_id") @db.Uuid
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime         @default(now()) @map("updated_at") @db.Timestamptz
  
  class         Class            @relation(fields: [classId], references: [id], onDelete: Restrict)
  studentAnswers StudentAnswer[]

  @@map("students")
}

model Term {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @map("term_id") @db.Uuid
  termName       String        @map("term_name") @db.VarChar(50)
  startDate      DateTime      @map("start_date") @db.Date
  endDate        DateTime      @map("end_date") @db.Date
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime      @default(now()) @map("updated_at") @db.Timestamptz
  
  subjectTerms   SubjectTerm[]
  answerKeys     AnswerKey[]

  @@map("terms")
}

model Subject {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @map("subject_id") @db.Uuid
  subjectName    String        @map("subject_name") @db.VarChar(100)
  subjectCode    String        @map("subject_code") @db.VarChar(20)
  teacherId      String        @map("teacher_id") @db.Uuid
  classId        String        @map("class_id") @db.Uuid
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime      @default(now()) @map("updated_at") @db.Timestamptz
  
  teacher        Teacher       @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  class          Class         @relation(fields: [classId], references: [id], onDelete: Restrict)
  subjectTerms   SubjectTerm[]
  folders        Folder[]
  answerKeys     AnswerKey[]

  @@map("subjects")
}

model SubjectTerm {
  subjectId   String   @map("subject_id") @db.Uuid
  termId      String   @map("term_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)

  @@id([subjectId, termId])
  @@map("subject_term")
}

model Folder {
  id           String          @id @default(dbgenerated("uuid_generate_v4()")) @map("folder_id") @db.Uuid
  folderName   String          @map("folder_name") @db.VarChar(100)
  teacherId    String          @map("teacher_id") @db.Uuid
  subjectId    String          @map("subject_id") @db.Uuid
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime        @default(now()) @map("updated_at") @db.Timestamptz
  
  teacher      Teacher         @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  subject      Subject         @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  studentAnswers StudentAnswer[]

  @@map("folders")
}

model AnswerKey {
  id                  String          @id @default(dbgenerated("uuid_generate_v4()")) @map("answer_key_id") @db.Uuid
  fileName            String          @map("file_name") @db.VarChar(255)
  content             String
  filePath            String?         @map("file_path") @db.VarChar(255)
  fileSize            Int?            @map("file_size")
  fileType            String?         @map("file_type") @db.VarChar(50)
  milvusCollectionName String         @map("milvus_collection_name") @db.VarChar(100)
  subjectId           String          @map("subject_id") @db.Uuid
  termId              String          @map("term_id") @db.Uuid
  createdAt           DateTime        @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime        @default(now()) @map("updated_at") @db.Timestamptz
  
  subject             Subject         @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  term                Term            @relation(fields: [termId], references: [id], onDelete: Restrict)
  studentAnswers      StudentAnswer[]
  assessments         Assessment[]

  @@map("answer_keys")
}

model StudentAnswer {
  id                  String        @id @default(dbgenerated("uuid_generate_v4()")) @map("student_answer_id") @db.Uuid
  fileName            String        @map("file_name") @db.VarChar(255)
  content             String
  filePath            String?       @map("file_path") @db.VarChar(255)
  fileSize            Int?          @map("file_size")
  fileType            String?       @map("file_type") @db.VarChar(50)
  milvusCollectionName String       @map("milvus_collection_name") @db.VarChar(100)
  studentId           String        @map("student_id") @db.Uuid
  answerKeyId         String        @map("answer_key_id") @db.Uuid
  folderId            String        @map("folder_id") @db.Uuid
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime      @default(now()) @map("updated_at") @db.Timestamptz
  
  student             Student       @relation(fields: [studentId], references: [id], onDelete: Restrict)
  answerKey           AnswerKey     @relation(fields: [answerKeyId], references: [id], onDelete: Restrict)
  folder              Folder        @relation(fields: [folderId], references: [id], onDelete: Restrict)
  assessments         Assessment[]

  @@map("student_answers")
}

model Assessment {
  id                 String        @id @default(dbgenerated("uuid_generate_v4()")) @map("assessment_id") @db.Uuid
  studentAnswerId    String        @map("student_answer_id") @db.Uuid
  answerKeyId        String        @map("answer_key_id") @db.Uuid
  score              Decimal       @db.Decimal(5, 2)
  maxScore           Decimal       @map("max_score") @db.Decimal(5, 2)
  feedbackText       String?       @map("feedback_text")
  feedbackJson       Json?         @map("feedback_json") @db.JsonB
  confidence         Decimal       @db.Decimal(5, 2)
  isApproved         Boolean       @default(false) @map("is_approved")
  approvedById       String?       @map("approved_by") @db.Uuid
  assessmentDate     DateTime      @default(now()) @map("assessment_date") @db.Timestamptz
  createdAt          DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime      @default(now()) @map("updated_at") @db.Timestamptz
  
  studentAnswer      StudentAnswer @relation(fields: [studentAnswerId], references: [id], onDelete: Restrict)
  answerKey          AnswerKey     @relation(fields: [answerKeyId], references: [id], onDelete: Restrict)
  approvedBy         Teacher?      @relation("ApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  llmUsageLogs       LlmUsageLog[]

  @@map("assessments")
}

model LlmUsageLog {
  id              String     @id @default(dbgenerated("uuid_generate_v4()")) @map("log_id") @db.Uuid
  operationType   String     @map("operation_type") @db.VarChar(50)
  inputPrompt     String     @map("input_prompt")
  outputText      String     @map("output_text")
  processingTime  Decimal    @map("processing_time") @db.Decimal(10, 3)
  tokenCount      Int        @map("token_count")
  tokenCost       Decimal?   @map("token_cost") @db.Decimal(10, 5)
  assessmentId    String?    @map("assessment_id") @db.Uuid
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz
  
  assessment      Assessment? @relation(fields: [assessmentId], references: [id], onDelete: SetNull)

  @@map("llm_usage_logs")
}